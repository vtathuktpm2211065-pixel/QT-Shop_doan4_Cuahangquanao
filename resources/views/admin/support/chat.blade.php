@extends('layouts.admin')

@section('content')
<style>
  .chat-container {
    height: 70vh;
    display: flex;
    flex-direction: column;
  }

  .chat-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem;
    border-radius: 10px 10px 0 0;
  }

  .chat-box {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    background-color: #f8f9fa;
    background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23e9ecef' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
  }

  .message {
    padding: 12px 16px;
    border-radius: 18px;
    margin-bottom: 15px;
    max-width: 70%;
    word-wrap: break-word;
    position: relative;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    animation: fadeIn 0.3s ease-in;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Tin nh·∫Øn kh√°ch h√†ng (b√™n tr√°i) */
  .message.user {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    color: #333;
    border: 1px solid #e9ecef;
    margin-right: auto;
    border-bottom-left-radius: 5px;
  }

  /* Tin nh·∫Øn admin ho·∫∑c staff (b√™n ph·∫£i) */
  .message.admin {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: #fff;
    margin-left: auto;
    border-bottom-right-radius: 5px;
  }

  .sender-name {
    font-weight: 600;
    margin-bottom: 5px;
    font-size: 0.85rem;
  }

  .message.admin .sender-name {
    color: rgba(255,255,255,0.9);
  }

  .message.user .sender-name {
    color: #6c757d;
  }

  .message-time {
    font-size: 0.7rem;
    margin-top: 8px;
    opacity: 0.8;
  }

  .message-content {
    line-height: 1.4;
  }

  .attachment-preview {
    margin-top: 8px;
    padding: 8px;
    background: rgba(255,255,255,0.2);
    border-radius: 8px;
  }

  .attachment-preview img {
    max-width: 200px;
    border-radius: 8px;
    cursor: pointer;
  }

  .file-attachment {
    display: inline-flex;
    align-items: center;
    padding: 6px 12px;
    background: rgba(255,255,255,0.9);
    border-radius: 6px;
    color: #333;
    text-decoration: none;
    margin-top: 5px;
  }

  .file-attachment:hover {
    background: white;
  }

  .status-badge {
    font-size: 0.7rem;
    padding: 2px 8px;
    border-radius: 10px;
    margin-left: 10px;
  }

  .chat-info {
    background: #f8f9fa;
    border-radius: 10px;
    padding: 15px;
    margin-bottom: 20px;
  }

  .typing-indicator {
    display: none;
    padding: 10px 16px;
    color: #6c757d;
    font-style: italic;
  }

  .scroll-to-bottom {
    position: fixed;
    bottom: 100px;
    right: 30px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: none;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    z-index: 1000;
  }
</style>

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-md-9">
      <div class="card shadow">
        <!-- Header -->
        <div class="chat-header">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h5 class="mb-1">üí¨ Tr√≤ chuy·ªán v·ªõi {{ $request->name }}</h5>
              <div class="d-flex align-items-center gap-3">
                <small>
                  <i class="fas fa-envelope"></i> {{ $request->email }}
                  @if($request->phone)
                    | <i class="fas fa-phone"></i> {{ $request->phone }}
                  @endif
                </small>
                <span class="badge bg-{{ $request->priority == 'high' ? 'danger' : ($request->priority == 'medium' ? 'warning' : 'success') }}">
                  {{ $request->priority == 'high' ? 'üî¥ Cao' : ($request->priority == 'medium' ? 'üü° Trung b√¨nh' : 'üü¢ Th·∫•p') }}
                </span>
                <span class="badge bg-info">{{ ucfirst($request->type) }}</span>
              </div>
            </div>
            <div class="text-end">
              <span class="badge bg-{{ $request->status == 'resolved' ? 'success' : ($request->status == 'processing' ? 'warning' : 'secondary') }}">
                {{ $request->status == 'resolved' ? '‚úÖ ƒê√£ gi·∫£i quy·∫øt' : ($request->status == 'processing' ? 'üîÑ ƒêang x·ª≠ l√Ω' : '‚è≥ Ch·ªù x·ª≠ l√Ω') }}
              </span>
              <div class="mt-2">
                <button class="btn btn-sm btn-outline-light me-2" onclick="updateStatus('processing')">
                  <i class="fas fa-play"></i> B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
                </button>
                <button class="btn btn-sm btn-outline-light" onclick="updateStatus('resolved')">
                  <i class="fas fa-check"></i> ƒê√°nh d·∫•u ƒë√£ gi·∫£i quy·∫øt
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Chat Info -->
        <div class="chat-info">
          <div class="row">
            <div class="col-md-6">
              <small><strong>Ng√†y g·ª≠i:</strong> {{ $request->created_at->format('d/m/Y H:i') }}</small>
            </div>
            <div class="col-md-6">
              <small><strong>Tin nh·∫Øn cu·ªëi:</strong> 
                @if($request->replies->count() > 0)
                  {{ $request->replies->last()->created_at->diffForHumans() }}
                @else
                  Ch∆∞a c√≥ ph·∫£n h·ªìi
                @endif
              </small>
            </div>
          </div>
        </div>

        <!-- Chat Messages -->
        <div class="chat-container">
          <div class="chat-box" id="chatBox">
            <!-- Tin nh·∫Øn g·ªëc t·ª´ ng∆∞·ªùi d√πng -->
            <div class="message user">
              <div class="sender-name">
                {{ $request->name }}
                <span class="badge bg-primary status-badge">Y√™u c·∫ßu ban ƒë·∫ßu</span>
              </div>
              <div class="message-content">{{ $request->message }}</div>
              @if($request->attachment)
              <div class="attachment-preview">
                <strong><i class="fas fa-paperclip"></i> File ƒë√≠nh k√®m:</strong>
                @if(in_array(pathinfo($request->attachment, PATHINFO_EXTENSION), ['jpg', 'jpeg', 'png', 'gif']))
                  <img src="{{ Storage::url($request->attachment) }}" 
                       alt="Attachment" 
                       onclick="openImageModal('{{ Storage::url($request->attachment) }}')"
                       class="mt-2">
                @else
                  <a href="{{ Storage::url($request->attachment) }}" 
                     target="_blank" 
                     class="file-attachment">
                    <i class="fas fa-download me-2"></i>
                    {{ basename($request->attachment) }}
                  </a>
                @endif
              </div>
              @endif
              <div class="message-time">{{ $request->created_at->format('d/m/Y H:i') }}</div>
            </div>

            <!-- C√°c ph·∫£n h·ªìi -->
@foreach($request->replies->sortBy('created_at') as $reply)
    @php
        $isAdminMessage = $reply->is_admin; // ‚úÖ S·ª≠ d·ª•ng tr∆∞·ªùng is_admin ƒë·ªÉ ph√¢n bi·ªát
        $senderName = $isAdminMessage ? ($reply->user ? $reply->user->name : 'Admin') : $reply->name;
        $isCurrentUser = Auth::id() === $reply->user_id;
    @endphp

    <div class="message {{ $isAdminMessage ? 'admin' : 'user' }}">
        <div class="sender-name">
            {{ $senderName }}
            @if($isAdminMessage)
                <span class="badge bg-success status-badge">Nh√¢n vi√™n</span>
            @else
                <span class="badge bg-primary status-badge">Kh√°ch h√†ng</span>
            @endif
            @if($isCurrentUser)
                <span class="badge bg-info status-badge">B·∫°n</span>
            @endif
        </div>
        <div class="message-content">{!! nl2br(e($reply->reply)) !!}</div>
        
        @if($reply->attachment)
        <div class="attachment-preview">
            <strong><i class="fas fa-paperclip"></i> File ƒë√≠nh k√®m:</strong>
            @if(in_array(pathinfo($reply->attachment, PATHINFO_EXTENSION), ['jpg', 'jpeg', 'png', 'gif']))
                <img src="{{ Storage::url($reply->attachment) }}" 
                     alt="Attachment" 
                     onclick="openImageModal('{{ Storage::url($reply->attachment) }}')"
                     class="mt-2">
            @else
                <a href="{{ Storage::url($reply->attachment) }}" 
                   target="_blank" 
                   class="file-attachment">
                    <i class="fas fa-download me-2"></i>
                    {{ basename($reply->attachment) }}
                </a>
            @endif
        </div>
        @endif
        
        <div class="message-time">
            {{ $reply->created_at->format('d/m/Y H:i') }}
            @if($reply->is_read && !$isAdminMessage)
                <span class="ms-2"><i class="fas fa-check-double text-success"></i> ƒê√£ xem</span>
            @endif
        </div>
    </div>
@endforeach

            <!-- Typing indicator -->
            <div class="typing-indicator" id="typingIndicator">
              <i class="fas fa-ellipsis-h"></i> ƒêang nh·∫≠p...
            </div>
          </div>

          <!-- Form tr·∫£ l·ªùi -->
          <div class="card-footer">
            <form action="{{ route('admin.support.reply', $request->id) }}" method="POST" enctype="multipart/form-data" id="replyForm">
              @csrf
              <div class="mb-3">
                <textarea name="reply" class="form-control" placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..." 
                         rows="2" required id="messageInput"></textarea>
                <div class="form-text">
                  <span id="charCount">0</span>/1000 k√Ω t·ª±
                </div>
              </div>
              
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <input type="file" name="attachment" id="attachment" 
                         class="form-control form-control-sm" 
                         accept=".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx"
                         style="display: none;">
                  <button type="button" class="btn btn-outline-secondary btn-sm" onclick="document.getElementById('attachment').click()">
                    <i class="fas fa-paperclip"></i> ƒê√≠nh k√®m file
                  </button>
                  <span id="fileName" class="ms-2 small text-muted"></span>
                </div>
                
                <div>
                  <button type="button" class="btn btn-outline-primary btn-sm me-2" onclick="insertQuickReply()">
                    <i class="fas fa-bolt"></i> Tr·∫£ l·ªùi nhanh
                  </button>
                  <button type="submit" class="btn btn-primary" id="sendButton">
                    <i class="fas fa-paper-plane"></i> G·ª≠i tin nh·∫Øn
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="col-md-3">
      <div class="card shadow">
        <div class="card-header bg-light">
          <h6 class="mb-0">üìã Th√¥ng tin y√™u c·∫ßu</h6>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <strong>M√£ y√™u c·∫ßu:</strong><br>
            <code>#{{ str_pad($request->id, 6, '0', STR_PAD_LEFT) }}</code>
          </div>
          
          <div class="mb-3">
            <strong>Tr·∫°ng th√°i:</strong><br>
            <select class="form-select form-select-sm" id="statusSelect" onchange="updateStatus(this.value)">
              <option value="pending" {{ $request->status == 'pending' ? 'selected' : '' }}>‚è≥ Ch·ªù x·ª≠ l√Ω</option>
              <option value="processing" {{ $request->status == 'processing' ? 'selected' : '' }}>üîÑ ƒêang x·ª≠ l√Ω</option>
              <option value="resolved" {{ $request->status == 'resolved' ? 'selected' : '' }}>‚úÖ ƒê√£ gi·∫£i quy·∫øt</option>
            </select>
          </div>

          <div class="mb-3">
            <strong>M·ª©c ƒë·ªô ∆∞u ti√™n:</strong><br>
            <select class="form-select form-select-sm" id="prioritySelect" onchange="updatePriority(this.value)">
              <option value="low" {{ $request->priority == 'low' ? 'selected' : '' }}>üü¢ Th·∫•p</option>
              <option value="medium" {{ $request->priority == 'medium' ? 'selected' : '' }}>üü° Trung b√¨nh</option>
              <option value="high" {{ $request->priority == 'high' ? 'selected' : '' }}>üî¥ Cao</option>
            </select>
          </div>

          <div class="mb-3">
            <strong>Th·ªëng k√™:</strong>
            <ul class="list-unstyled small mt-2">
              <li><i class="fas fa-comment me-2"></i> {{ $request->replies->count() }} ph·∫£n h·ªìi</li>
              <li><i class="fas fa-clock me-2"></i> 
                @if($request->replies->count() > 0)
                  {{ $request->created_at->diffInMinutes($request->replies->first()->created_at) }} ph√∫t ph·∫£n h·ªìi ƒë·∫ßu
                @else
                  Ch∆∞a ph·∫£n h·ªìi
                @endif
              </li>
              <li><i class="fas fa-history me-2"></i> 
                {{ $request->created_at->diffForHumans() }}
              </li>
            </ul>
          </div>

          <hr>
          <div class="d-grid gap-2">
            <a href="mailto:{{ $request->email }}" class="btn btn-outline-primary btn-sm">
              <i class="fas fa-envelope"></i> G·ª≠i email
            </a>
            <a href="{{ route('admin.support.index') }}" class="btn btn-outline-secondary btn-sm">
              <i class="fas fa-arrow-left"></i> Quay l·∫°i danh s√°ch
            </a>
          </div>
        </div>
      </div>

      <!-- Tr·∫£ l·ªùi nhanh -->
      <div class="card shadow mt-3">
        <div class="card-header bg-light">
          <h6 class="mb-0">‚ö° Tr·∫£ l·ªùi nhanh</h6>
        </div>
        <div class="card-body">
          @foreach([
            'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t!' => 'Ph·∫£n h·ªìi chung',
            'Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu c·ªßa b·∫°n v√† ƒëang x·ª≠ l√Ω.' => 'ƒê√£ nh·∫≠n y√™u c·∫ßu',
            'Vui l√≤ng cung c·∫•p th√™m th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i h·ªó tr·ª£ t·ªët h∆°n.' => 'Y√™u c·∫ßu th√™m th√¥ng tin',
            'V·∫•n ƒë·ªÅ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√† s·∫Ω ƒë∆∞·ª£c gi·∫£i quy·∫øt trong v√≤ng 24h.' => 'ƒê√£ ghi nh·∫≠n',
            'C·∫£m ∆°n b·∫°n ƒë√£ ki√™n nh·∫´n ch·ªù ƒë·ª£i. Ch√∫ng t√¥i ƒëang t√≠ch c·ª±c x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.' => 'ƒêang x·ª≠ l√Ω'
          ] as $reply => $label)
            <button type="button" class="btn btn-outline-secondary btn-sm w-100 mb-2 text-start" 
                    onclick="document.getElementById('messageInput').value = '{{ $reply }}'; document.getElementById('charCount').textContent = {{ strlen($reply) }};">
              <small>{{ $label }}</small>
            </button>
          @endforeach
        </div>
      </div>

      <!-- G·ª≠i v·ªã tr√≠ nhanh -->
      <div class="card shadow mt-3">
        <div class="card-header bg-light">
          <h6 class="mb-0">üìç G·ª≠i v·ªã tr√≠ nhanh</h6>
        </div>
        <div class="card-body">
          @foreach($shopLocations as $shop)
          <div class="mb-3 p-2 border rounded">
            <strong class="d-block">{{ $shop->name }}</strong>
            <small class="text-muted">{{ $shop->address }}</small>
            <div class="mt-2">
              <button class="btn btn-sm btn-outline-primary w-100 send-location-btn" 
                      data-lat="{{ $shop->latitude }}" 
                      data-lng="{{ $shop->longitude }}"
                      data-name="{{ $shop->name }}"
                      data-address="{{ $shop->address }}">
                <i class="fas fa-map-marker-alt"></i> G·ª≠i v·ªã tr√≠
              </button>
              <a href="https://www.google.com/maps/dir/?api=1&destination={{ $shop->latitude }},{{ $shop->longitude }}" 
                 target="_blank" class="btn btn-sm btn-outline-success w-100 mt-1">
                <i class="fas fa-route"></i> Ch·ªâ ƒë∆∞·ªùng
              </a>
            </div>
          </div>
          @endforeach

          @if($request->latitude && $request->longitude)
          <div class="mb-3 p-2 border rounded bg-light">
            <strong class="d-block">üìç V·ªã tr√≠ kh√°ch h√†ng</strong>
            <small class="text-muted">{{ $request->address ?? 'ƒê√£ chia s·∫ª v·ªã tr√≠' }}</small>
            <div class="mt-2">
              <a href="https://www.google.com/maps/dir/{{ $request->latitude }},{{ $request->longitude }}/{{ $shopLocations->first()->latitude }},{{ $shopLocations->first()->longitude }}" 
                 target="_blank" class="btn btn-sm btn-outline-info w-100">
                <i class="fas fa-walking"></i> T·ª´ kh√°ch ‚Üí Shop
              </a>
            </div>
          </div>
          @endif
        </div>
      </div>

<!-- Scroll to bottom button -->
<button class="scroll-to-bottom" id="scrollToBottom" onclick="scrollToBottom()">
  <i class="fas fa-arrow-down"></i>
</button>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Xem h√¨nh ·∫£nh</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body text-center">
        <img src="" id="modalImage" style="max-width: 100%;">
      </div>
    </div>
  </div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&libraries=places&callback=initMiniMap" async defer></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const chatBox = document.getElementById('chatBox');
  const messageInput = document.getElementById('messageInput');
  const charCount = document.getElementById('charCount');
  const attachmentInput = document.getElementById('attachment');
  const fileName = document.getElementById('fileName');
  const scrollToBottomBtn = document.getElementById('scrollToBottom');

  // T·ª± ƒë·ªông cu·ªôn xu·ªëng d∆∞·ªõi c√πng
  scrollToBottom();

  // ƒê·∫øm k√Ω t·ª±
  messageInput.addEventListener('input', function() {
    const length = this.value.length;
    charCount.textContent = length;
    charCount.className = length > 1000 ? 'text-danger' : 'text-muted';
  });

  // Hi·ªÉn th·ªã t√™n file
  attachmentInput.addEventListener('change', function() {
    if (this.files.length > 0) {
      fileName.textContent = this.files[0].name;
      fileName.className = 'ms-2 small text-success';
    } else {
      fileName.textContent = '';
    }
  });

  // Hi·ªÉn th·ªã n√∫t scroll to bottom khi cu·ªôn l√™n
  chatBox.addEventListener('scroll', function() {
    const isAtBottom = this.scrollHeight - this.scrollTop - this.clientHeight < 100;
    scrollToBottomBtn.style.display = isAtBottom ? 'none' : 'flex';
  });

  // Kh·ªüi t·∫°o char count
  charCount.textContent = messageInput.value.length;
});

function scrollToBottom() {
  const chatBox = document.getElementById('chatBox');
  chatBox.scrollTop = chatBox.scrollHeight;
}

function openImageModal(src) {
  document.getElementById('modalImage').src = src;
  new bootstrap.Modal(document.getElementById('imageModal')).show();
}

function updateStatus(status) {
  fetch(`/admin/support/{{ $request->id }}/status`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-TOKEN': '{{ csrf_token() }}'
    },
    body: JSON.stringify({ status: status })
  }).then(response => response.json())
    .then(data => {
      if (data.success) {
        location.reload();
      }
    });
}

function updatePriority(priority) {
  // T∆∞∆°ng t·ª± nh∆∞ updateStatus, b·∫°n c√≥ th·ªÉ th√™m API endpoint cho priority
  alert('T√≠nh nƒÉng c·∫≠p nh·∫≠t m·ª©c ƒë·ªô ∆∞u ti√™n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn');
}

function insertQuickReply() {
  const quickReplies = [
    "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t!",
    "Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu c·ªßa b·∫°n v√† ƒëang x·ª≠ l√Ω.",
    "Vui l√≤ng cung c·∫•p th√™m th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i h·ªó tr·ª£ t·ªët h∆°n."
  ];
  
  const randomReply = quickReplies[Math.floor(Math.random() * quickReplies.length)];
  document.getElementById('messageInput').value = randomReply;
  document.getElementById('charCount').textContent = randomReply.length;
  document.getElementById('messageInput').focus();
}

// Auto-scroll khi c√≥ tin nh·∫Øn m·ªõi
const observer = new MutationObserver(function(mutations) {
  mutations.forEach(function(mutation) {
    if (mutation.addedNodes.length) {
      scrollToBottom();
    }
  });
});

observer.observe(document.getElementById('chatBox'), {
  childList: true,
  subtree: true
});

document.querySelectorAll('.send-location-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const lat = this.dataset.lat;
        const lng = this.dataset.lng;
        const name = this.dataset.name;
        const address = this.dataset.address;Füìã Th√¥ng tin y√™u c·∫ßu
        
        fetch(`/admin/support/{{ $request->id }}/send-location`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '{{ csrf_token() }}'
            },
            body: JSON.stringify({
                latitude: lat,
                longitude: lng,
                name: name,
                address: address
            })
        }).then(response => response.json())
          .then(data => {
              if (data.success) {
                  location.reload();
              }
          });
    });
});

// Mini Map cho v·ªã tr√≠ kh√°ch h√†ng
function initMiniMap() {
    @if($request->latitude && $request->longitude)
    const customerLocation = { 
        lat: {{ $request->latitude }}, 
        lng: {{ $request->longitude }} 
    };
    
    const map = new google.maps.Map(document.getElementById('miniMap'), {
        zoom: 15,
        center: customerLocation,
        mapTypeControl: false,
        streetViewControl: false,
        fullscreenControl: true,
        styles: [
            {
                "featureType": "all",
                "elementType": "geometry",
                "stylers": [{"color": "#f5f5f5"}]
            }
        ]
    });

    new google.maps.Marker({
        position: customerLocation,
        map: map,
        title: 'V·ªã tr√≠ kh√°ch h√†ng',
        icon: {
            url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
            scaledSize: new google.maps.Size(32, 32)
        }
    });

    // Th√™m marker cho c√°c c·ª≠a h√†ng g·∫ßn ƒë√≥
    @foreach($shopLocations as $shop)
    new google.maps.Marker({
        position: { lat: {{ $shop->latitude }}, lng: {{ $shop->longitude }} },
        map: map,
        title: '{{ $shop->name }}',
        icon: {
            url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
            scaledSize: new google.maps.Size(32, 32)
        }
    });
    @endforeach
    @endif
}

// Quick Reply v·ªõi v·ªã tr√≠
function addLocationQuickReplies() {
    const locationReplies = {
        'Ch√†o b·∫°n! D∆∞·ªõi ƒë√¢y l√† ƒë·ªãa ch·ªâ c·ª≠a h√†ng ch√∫ng t√¥i:': 'üìç G·ª≠i ƒë·ªãa ch·ªâ c·ª≠a h√†ng',
        'B·∫°n c√≥ th·ªÉ xem ƒë∆∞·ªùng ƒëi ƒë·∫øn c·ª≠a h√†ng t·∫°i ƒë√¢y:': 'üöó G·ª≠i ch·ªâ ƒë∆∞·ªùng',
        'ƒê√¢y l√† chi nh√°nh g·∫ßn b·∫°n nh·∫•t:': 'üè™ G·ª£i √Ω chi nh√°nh g·∫ßn nh·∫•t'
    };
    
    // Th√™m v√†o quick reply templates
}
</script>

<script>
class SupportChatRealTime {
    constructor(supportRequestId) {
        this.supportRequestId = supportRequestId;
        this.lastMessageId = {{ $request->replies->max('id') ?? 0 }};
        this.isPolling = false;
        this.pollingInterval = null;
        this.init();
    }

    init() {
        this.startPolling();
        this.setupFormSubmit();
        this.setupFirebase();
    }

    // Polling ƒë·ªÉ l·∫•y tin nh·∫Øn m·ªõi
    startPolling() {
        this.pollingInterval = setInterval(() => {
            this.checkNewMessages();
        }, 3000); // Ki·ªÉm tra m·ªói 3 gi√¢y
    }

    async checkNewMessages() {
        if (this.isPolling) return;
        
        this.isPolling = true;
        try {
            const response = await fetch(`/admin/support/${this.supportRequestId}/messages?last_message_id=${this.lastMessageId}`);
            const data = await response.json();
            
            if (data.messages && data.messages.length > 0) {
                this.appendNewMessages(data.messages);
                this.lastMessageId = data.last_message_id;
                this.scrollToBottom();
                this.updateUnreadBadges();
            }
        } catch (error) {
            console.error('Error fetching new messages:', error);
        }
        this.isPolling = false;
    }

appendNewMessages(messages) {
    console.log('Appending messages:', messages);
    const chatBox = document.getElementById('chatBox');
    console.log('Chat box found:', chatBox);
    
    messages.forEach(message => {
        console.log('Processing message:', message);
        const existingMessage = document.querySelector(`[data-message-id="${message.id}"]`);
        if (existingMessage) {
            console.log('Message already exists:', message.id);
            return;
        }
        
        const messageElement = this.createMessageElement(message);
        console.log('Created message element:', messageElement);
        
        if (messageElement && chatBox) {
            chatBox.appendChild(messageElement);
            console.log('Message appended successfully');
        } else {
            console.error('Failed to append message:', { messageElement, chatBox });
        }
    });
}

createMessageElement(message) {
    const isAdmin = message.is_admin; // S·ª≠ d·ª•ng tr∆∞·ªùng is_admin
    const messageClass = isAdmin ? 'message admin' : 'message user';
    const senderName = isAdmin ? (message.user ? message.user.name : 'Admin') : (message.name || 'Kh√°ch h√†ng');
    
    // T·∫°o div element thay v√¨ return string
    const messageDiv = document.createElement('div');
    messageDiv.className = messageClass;
    messageDiv.setAttribute('data-message-id', message.id);
    
    messageDiv.innerHTML = `
        <div class="sender-name">
            ${this.escapeHtml(senderName)}
            ${isAdmin ? '<span class="badge bg-success status-badge">Nh√¢n vi√™n</span>' : '<span class="badge bg-primary status-badge">Kh√°ch h√†ng</span>'}
        </div>
        <div class="message-content">${this.escapeHtml(message.reply)}</div>
        <div class="message-time">
            ${new Date(message.created_at).toLocaleString('vi-VN')}
        </div>
    `;
    
    return messageDiv;
}

escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

    setupFormSubmit() {
    const form = document.getElementById('replyForm');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (this.isSubmitting) return;
        
        const message = messageInput.value.trim();
        if (!message) return;
        
        this.isSubmitting = true;
        sendButton.disabled = true;
        sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang g·ª≠i...';
        
        try {
            const formData = new FormData(form);
            
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRF-TOKEN': '{{ csrf_token() }}',
                    'Accept': 'application/json'
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Th√™m tin nh·∫Øn m·ªõi v√†o chat
                this.appendNewMessages([result.reply]);
                this.lastMessageId = result.reply.id;
                this.scrollToBottom();
                
                // Reset form
                messageInput.value = '';
                document.getElementById('charCount').textContent = '0';
                document.getElementById('fileName').textContent = '';
                
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                this.showSuccessMessage(result.message);
            } else {
                throw new Error(result.message || 'C√≥ l·ªói x·∫£y ra');
            }
        } catch (error) {
            console.error('Error sending message:', error);
            this.showErrorMessage(error.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn');
        } finally {
            this.isSubmitting = false;
            sendButton.disabled = false;
            sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> G·ª≠i tin nh·∫Øn';
        }
    });
}


// Th√™m method hi·ªÉn th·ªã l·ªói
showErrorMessage(message) {
    const toast = document.createElement('div');
    toast.className = 'alert alert-danger alert-dismissible fade show position-fixed';
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.innerHTML = `
        <i class="fas fa-exclamation-circle"></i> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 5000);
}

    setupFirebase() {
        // Kh·ªüi t·∫°o Firebase Messaging
        const messaging = firebase.messaging();
        
        // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
        this.requestNotificationPermission();
        
        // X·ª≠ l√Ω tin nh·∫Øn background
        messaging.onBackgroundMessage((payload) => {
            console.log('Received background message:', payload);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o
            this.showNotification(payload);
        });
    }

    async requestNotificationPermission() {
        try {
            const messaging = firebase.messaging();
            await messaging.requestPermission();
            const token = await messaging.getToken();
            
            // L∆∞u token v√†o database
            await this.saveFCMToken(token);
            
            console.log('FCM Token:', token);
        } catch (error) {
            console.log('Notification permission denied');
        }
    }

    async saveFCMToken(token) {
        try {
            await fetch('/api/save-fcm-token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token() }}'
                },
                body: JSON.stringify({ token })
            });
        } catch (error) {
            console.error('Error saving FCM token:', error);
        }
    }

    showNotification(payload) {
        if (!("Notification" in window)) {
            console.log("This browser does not support notifications");
            return;
        }

        if (Notification.permission === "granted") {
            const notification = new Notification(payload.notification.title, {
                body: payload.notification.body,
                icon: '/images/logo.png',
                data: payload.data
            });

            notification.onclick = () => {
                window.focus();
                notification.close();
                
                // X·ª≠ l√Ω khi click v√†o notification
                if (payload.data.support_request_id) {
                    window.location.href = `/admin/support/chat/${payload.data.support_request_id}`;
                }
            };
        }
    }

    scrollToBottom() {
        const chatBox = document.getElementById('chatBox');
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    updateUnreadBadges() {
        // C·∫≠p nh·∫≠t badge unread count
        fetch('/admin/support/unread-count')
            .then(response => response.json())
            .then(data => {
                const badge = document.querySelector('.unread-badge');
                if (badge) {
                    badge.textContent = data.unread_count;
                    badge.style.display = data.unread_count > 0 ? 'inline' : 'none';
                }
            });
    }

    destroy() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
        }
    }
}

// Kh·ªüi t·∫°o real-time chat khi trang load
document.addEventListener('DOMContentLoaded', function() {
    const supportRequestId = {{ $request->id }};
    window.supportChat = new SupportChatRealTime(supportRequestId);
});
</script>
@endsection
